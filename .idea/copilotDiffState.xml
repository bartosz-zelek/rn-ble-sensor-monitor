<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rnblesensormonitor/bluetooth/BleGattCallback.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rnblesensormonitor/bluetooth/BleGattCallback.kt" />
              <option name="originalContent" value="package com.example.rnblesensormonitor.bluetooth&#10;&#10;import android.Manifest&#10;import android.bluetooth.BluetoothGatt&#10;import android.bluetooth.BluetoothGattCallback&#10;import android.bluetooth.BluetoothProfile&#10;import android.content.Context&#10;import android.util.Log&#10;import android.widget.Toast&#10;import android.os.Handler&#10;import android.os.Looper&#10;import androidx.annotation.RequiresPermission&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.LiveData&#10;import android.bluetooth.BluetoothGattDescriptor&#10;import java.util.UUID&#10;&#10;@Singleton&#10;class BleGattCallback @Inject constructor(&#10;    @ApplicationContext private val context: Context&#10;) : BluetoothGattCallback() {&#10;    private val mainHandler = Handler(Looper.getMainLooper())&#10;    // LiveData to emit received characteristic data&#10;    private val _receivedData = MutableLiveData&lt;ByteArray&gt;()&#10;    val receivedData: LiveData&lt;ByteArray&gt; get() = _receivedData&#10;&#10;    companion object {&#10;        // Test service and characteristic UUIDs from GATTS defines&#10;        val SERVICE_UUID: UUID = UUID.fromString(&quot;000000ff-0000-1000-8000-00805f9b34fb&quot;) // 0x00FF&#10;        val CHARACTERISTIC_UUID: UUID = UUID.fromString(&quot;0000ff01-0000-1000-8000-00805f9b34fb&quot;) // 0xFF01&#10;        val CLIENT_CHAR_CONFIG_UUID: UUID = UUID.fromString(&quot;00002902-0000-1000-8000-00805f9b34fb&quot;)&#10;    }&#10;&#10;    @RequiresPermission(Manifest.permission.BLUETOOTH_CONNECT)&#10;    override fun onConnectionStateChange(gatt: BluetoothGatt?, status: Int, newState: Int) {&#10;        val deviceName = gatt?.device?.name ?: gatt?.device?.address ?: &quot;device&quot;&#10;        if (newState == BluetoothProfile.STATE_CONNECTED) {&#10;            Log.d(&quot;BleGattCallback&quot;, &quot;Connected to GATT server.&quot;)&#10;            mainHandler.post { Toast.makeText(context, &quot;Connected to $deviceName&quot;, Toast.LENGTH_SHORT).show() }&#10;            // Start service discovery to enable characteristic notifications&#10;            gatt?.discoverServices()&#10;        } else if (newState == BluetoothProfile.STATE_DISCONNECTED) {&#10;            Log.d(&quot;BleGattCallback&quot;, &quot;Disconnected from GATT server.&quot;)&#10;            mainHandler.post { Toast.makeText(context, &quot;Disconnected from $deviceName&quot;, Toast.LENGTH_SHORT).show() }&#10;        }&#10;    }&#10;&#10;    @RequiresPermission(Manifest.permission.BLUETOOTH_CONNECT)&#10;    @Suppress(&quot;Deprecation&quot;)&#10;    override fun onServicesDiscovered(gatt: BluetoothGatt?, status: Int) {&#10;        super.onServicesDiscovered(gatt, status)&#10;        if (status == BluetoothGatt.GATT_SUCCESS &amp;&amp; gatt != null) {&#10;            val service = gatt.getService(SERVICE_UUID)&#10;            val characteristic = service?.getCharacteristic(CHARACTERISTIC_UUID)&#10;            if (characteristic != null) {&#10;                // Enable notifications locally&#10;                gatt.setCharacteristicNotification(characteristic, true)&#10;                // Enable notifications on the device (descriptor)&#10;                val descriptor = characteristic.getDescriptor(CLIENT_CHAR_CONFIG_UUID)&#10;                descriptor.value = BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE&#10;                gatt.writeDescriptor(descriptor)&#10;            }&#10;        }&#10;    }&#10;&#10;    @RequiresPermission(Manifest.permission.BLUETOOTH_CONNECT)&#10;    @Suppress(&quot;Deprecation&quot;)&#10;    override fun onCharacteristicChanged(gatt: BluetoothGatt?, characteristic: android.bluetooth.BluetoothGattCharacteristic?) {&#10;        super.onCharacteristicChanged(gatt, characteristic)&#10;        characteristic?.value?.let { data -&gt;&#10;            mainHandler.post { _receivedData.value = data }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.rnblesensormonitor.bluetooth&#10;&#10;import android.Manifest&#10;import android.bluetooth.BluetoothGatt&#10;import android.bluetooth.BluetoothGattCallback&#10;import android.bluetooth.BluetoothProfile&#10;import android.content.Context&#10;import android.util.Log&#10;import android.widget.Toast&#10;import android.os.Handler&#10;import android.os.Looper&#10;import androidx.annotation.RequiresPermission&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.LiveData&#10;import android.bluetooth.BluetoothGattCharacteristic&#10;import android.bluetooth.BluetoothGattDescriptor&#10;import java.util.UUID&#10;&#10;@Singleton&#10;class BleGattCallback @Inject constructor(&#10;    @ApplicationContext private val context: Context&#10;) : BluetoothGattCallback() {&#10;    private val mainHandler = Handler(Looper.getMainLooper())&#10;    // LiveData to emit received characteristic data&#10;    private val _receivedData = MutableLiveData&lt;ByteArray&gt;()&#10;    val receivedData: LiveData&lt;ByteArray&gt; get() = _receivedData&#10;&#10;    companion object {&#10;        // Test service and characteristic UUIDs from GATTS defines&#10;        val SERVICE_UUID: UUID = UUID.fromString(&quot;000000ff-0000-1000-8000-00805f9b34fb&quot;) // 0x00FF&#10;        val CHARACTERISTIC_UUID: UUID = UUID.fromString(&quot;0000ff01-0000-1000-8000-00805f9b34fb&quot;) // 0xFF01&#10;        val CLIENT_CHAR_CONFIG_UUID: UUID = UUID.fromString(&quot;00002902-0000-1000-8000-00805f9b34fb&quot;)&#10;    }&#10;&#10;    @RequiresPermission(Manifest.permission.BLUETOOTH_CONNECT)&#10;    override fun onConnectionStateChange(gatt: BluetoothGatt?, status: Int, newState: Int) {&#10;        val deviceName = gatt?.device?.name ?: gatt?.device?.address ?: &quot;device&quot;&#10;        if (newState == BluetoothProfile.STATE_CONNECTED) {&#10;            Log.d(&quot;BleGattCallback&quot;, &quot;Connected to GATT server.&quot;)&#10;            // store gatt and request optimal connection parameters&#10;            bluetoothGatt = gatt&#10;            gatt?.requestConnectionPriority(BluetoothGatt.CONNECTION_PRIORITY_HIGH)&#10;            gatt?.requestMtu(517)&#10;            mainHandler.post { Toast.makeText(context, &quot;Connected to $deviceName&quot;, Toast.LENGTH_SHORT).show() }&#10;            // Start service discovery to enable characteristic notifications&#10;            gatt?.discoverServices()&#10;        } else if (newState == BluetoothProfile.STATE_DISCONNECTED) {&#10;            Log.d(&quot;BleGattCallback&quot;, &quot;Disconnected from GATT server.&quot;)&#10;            mainHandler.post { Toast.makeText(context, &quot;Disconnected from $deviceName&quot;, Toast.LENGTH_SHORT).show() }&#10;            // stop keep-alive&#10;            mainHandler.removeCallbacks(keepAliveRunnable)&#10;            bluetoothGatt = null&#10;            notificationCharacteristic = null&#10;        }&#10;    }&#10;&#10;    @RequiresPermission(Manifest.permission.BLUETOOTH_CONNECT)&#10;    @Suppress(&quot;Deprecation&quot;)&#10;    override fun onServicesDiscovered(gatt: BluetoothGatt?, status: Int) {&#10;        super.onServicesDiscovered(gatt, status)&#10;        if (status == BluetoothGatt.GATT_SUCCESS &amp;&amp; gatt != null) {&#10;            val service = gatt.getService(SERVICE_UUID)&#10;            val characteristic = service?.getCharacteristic(CHARACTERISTIC_UUID)&#10;            if (characteristic != null) {&#10;                // Enable notifications locally&#10;                gatt.setCharacteristicNotification(characteristic, true)&#10;                // Enable notifications on the device (descriptor)&#10;                val descriptor = characteristic.getDescriptor(CLIENT_CHAR_CONFIG_UUID)&#10;                descriptor.value = BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE&#10;                gatt.writeDescriptor(descriptor)&#10;                // start keep-alive pings&#10;                notificationCharacteristic = characteristic&#10;                mainHandler.postDelayed(keepAliveRunnable, KEEP_ALIVE_INTERVAL)&#10;            }&#10;        }&#10;    }&#10;&#10;    @RequiresPermission(Manifest.permission.BLUETOOTH_CONNECT)&#10;    @Suppress(&quot;Deprecation&quot;)&#10;    override fun onCharacteristicChanged(gatt: BluetoothGatt?, characteristic: android.bluetooth.BluetoothGattCharacteristic?) {&#10;        super.onCharacteristicChanged(gatt, characteristic)&#10;        characteristic?.value?.let { data -&gt;&#10;            mainHandler.post { _receivedData.value = data }&#10;        }&#10;    }&#10;    &#10;    // keep-alive implementation&#10;    private var bluetoothGatt: BluetoothGatt? = null&#10;    private var notificationCharacteristic: BluetoothGattCharacteristic? = null&#10;    private companion object {&#10;        const val KEEP_ALIVE_INTERVAL = 5000L&#10;    }&#10;    private val keepAliveRunnable = object : Runnable {&#10;        override fun run() {&#10;            notificationCharacteristic?.let { bluetoothGatt?.readCharacteristic(it) }&#10;            mainHandler.postDelayed(this, KEEP_ALIVE_INTERVAL)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rnblesensormonitor/ui/home/HomeFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rnblesensormonitor/ui/home/HomeFragment.kt" />
              <option name="originalContent" value="package com.example.rnblesensormonitor.ui.home&#10;&#10;import android.Manifest&#10;import android.annotation.SuppressLint&#10;import android.content.pm.PackageManager&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.annotation.RequiresPermission&#10;import androidx.core.content.ContextCompat&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import com.example.rnblesensormonitor.databinding.FragmentHomeBinding&#10;import com.example.rnblesensormonitor.ui.adapter.DeviceListAdapter&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import android.util.Log&#10;&#10;@AndroidEntryPoint&#10;class HomeFragment : Fragment() {&#10;&#10;    private var _binding: FragmentHomeBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private val homeViewModel: HomeViewModel by viewModels()&#10;    private lateinit var deviceListAdapter: DeviceListAdapter&#10;&#10;    @SuppressLint(&quot;MissingPermission&quot;)&#10;    private val requestMultiplePermissions =&#10;        registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions())&#10;        { permissions -&gt;&#10;            if (permissions.entries.all { it.value }) {&#10;                homeViewModel.startScanning()&#10;            }&#10;        }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentHomeBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        setupRecyclerView()&#10;&#10;        binding.scanButton.setOnClickListener {&#10;            checkAndRequestPermissions()&#10;        }&#10;&#10;        homeViewModel.devices.observe(viewLifecycleOwner) { devices -&gt;&#10;            deviceListAdapter.submitList(devices)&#10;        }&#10;    }&#10;&#10;    private fun checkAndRequestPermissions() {&#10;        val permissionsToRequest = mutableListOf&lt;String&gt;()&#10;        if (ContextCompat.checkSelfPermission(&#10;                requireContext(),&#10;                Manifest.permission.BLUETOOTH_SCAN&#10;            ) != PackageManager.PERMISSION_GRANTED&#10;        ) {&#10;            permissionsToRequest.add(Manifest.permission.BLUETOOTH_SCAN)&#10;        }&#10;        if (ContextCompat.checkSelfPermission(&#10;                requireContext(),&#10;                Manifest.permission.BLUETOOTH_CONNECT&#10;            ) != PackageManager.PERMISSION_GRANTED&#10;        ) {&#10;            permissionsToRequest.add(Manifest.permission.BLUETOOTH_CONNECT)&#10;        }&#10;        if (ContextCompat.checkSelfPermission(&#10;                requireContext(),&#10;                Manifest.permission.ACCESS_FINE_LOCATION&#10;            ) != PackageManager.PERMISSION_GRANTED&#10;        ) {&#10;            permissionsToRequest.add(Manifest.permission.ACCESS_FINE_LOCATION)&#10;        }&#10;&#10;        if (permissionsToRequest.isNotEmpty()) {&#10;            requestMultiplePermissions.launch(permissionsToRequest.toTypedArray())&#10;        }&#10;        homeViewModel.startScanning()&#10;&#10;    }&#10;&#10;    @SuppressLint(&quot;MissingPermission&quot;)&#10;    private fun setupRecyclerView() {&#10;        deviceListAdapter = DeviceListAdapter { device -&gt;&#10;            Log.d(&quot;HomeFragment&quot;, &quot;Device clicked: ${device.name}, ${device.address}&quot;)&#10;            homeViewModel.connectToDevice(device)&#10;        }&#10;        binding.deviceList.apply {&#10;            adapter = deviceListAdapter&#10;            layoutManager = LinearLayoutManager(requireContext())&#10;        }&#10;    }&#10;&#10;    @RequiresPermission(Manifest.permission.BLUETOOTH_SCAN)&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        homeViewModel.stopScanning()&#10;        _binding = null&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.rnblesensormonitor.ui.home&#10;&#10;import android.Manifest&#10;import android.annotation.SuppressLint&#10;import android.content.pm.PackageManager&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.annotation.RequiresPermission&#10;import androidx.core.content.ContextCompat&#10;import androidx.fragment.app.Fragment&#10;import androidx.fragment.app.viewModels&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import com.example.rnblesensormonitor.databinding.FragmentHomeBinding&#10;import com.example.rnblesensormonitor.ui.adapter.DeviceListAdapter&#10;import dagger.hilt.android.AndroidEntryPoint&#10;import android.util.Log&#10;&#10;@AndroidEntryPoint&#10;class HomeFragment : Fragment() {&#10;&#10;    private var _binding: FragmentHomeBinding? = null&#10;    private val binding get() = _binding!!&#10;&#10;    private val homeViewModel: HomeViewModel by viewModels()&#10;    private lateinit var deviceListAdapter: DeviceListAdapter&#10;&#10;    @SuppressLint(&quot;MissingPermission&quot;)&#10;    private val requestMultiplePermissions =&#10;        registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions())&#10;        { permissions -&gt;&#10;            if (permissions.entries.all { it.value }) {&#10;                homeViewModel.startScanning()&#10;            }&#10;        }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater,&#10;        container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View {&#10;        _binding = FragmentHomeBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        setupRecyclerView()&#10;&#10;        binding.scanButton.setOnClickListener {&#10;            checkAndRequestPermissions()&#10;        }&#10;&#10;        homeViewModel.devices.observe(viewLifecycleOwner) { devices -&gt;&#10;            deviceListAdapter.submitList(devices)&#10;        }&#10;        // Observe incoming BLE data and display it&#10;        homeViewModel.receivedData.observe(viewLifecycleOwner) { data -&gt;&#10;            // Convert bytes to hex string&#10;            val hexString = data.joinToString(&quot; &quot;) { String.format(&quot;%02X&quot;, it) }&#10;            binding.dataText.text = &quot;Data: $hexString&quot;&#10;        }&#10;    }&#10;&#10;    private fun checkAndRequestPermissions() {&#10;        val permissionsToRequest = mutableListOf&lt;String&gt;()&#10;        if (ContextCompat.checkSelfPermission(&#10;                requireContext(),&#10;                Manifest.permission.BLUETOOTH_SCAN&#10;            ) != PackageManager.PERMISSION_GRANTED&#10;        ) {&#10;            permissionsToRequest.add(Manifest.permission.BLUETOOTH_SCAN)&#10;        }&#10;        if (ContextCompat.checkSelfPermission(&#10;                requireContext(),&#10;                Manifest.permission.BLUETOOTH_CONNECT&#10;            ) != PackageManager.PERMISSION_GRANTED&#10;        ) {&#10;            permissionsToRequest.add(Manifest.permission.BLUETOOTH_CONNECT)&#10;        }&#10;        if (ContextCompat.checkSelfPermission(&#10;                requireContext(),&#10;                Manifest.permission.ACCESS_FINE_LOCATION&#10;            ) != PackageManager.PERMISSION_GRANTED&#10;        ) {&#10;            permissionsToRequest.add(Manifest.permission.ACCESS_FINE_LOCATION)&#10;        }&#10;&#10;        if (permissionsToRequest.isNotEmpty()) {&#10;            requestMultiplePermissions.launch(permissionsToRequest.toTypedArray())&#10;        }&#10;        homeViewModel.startScanning()&#10;&#10;    }&#10;&#10;    @SuppressLint(&quot;MissingPermission&quot;)&#10;    private fun setupRecyclerView() {&#10;        deviceListAdapter = DeviceListAdapter { device -&gt;&#10;            Log.d(&quot;HomeFragment&quot;, &quot;Device clicked: ${device.name}, ${device.address}&quot;)&#10;            homeViewModel.connectToDevice(device)&#10;        }&#10;        binding.deviceList.apply {&#10;            adapter = deviceListAdapter&#10;            layoutManager = LinearLayoutManager(requireContext())&#10;        }&#10;    }&#10;&#10;    @RequiresPermission(Manifest.permission.BLUETOOTH_SCAN)&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        homeViewModel.stopScanning()&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rnblesensormonitor/ui/home/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rnblesensormonitor/ui/home/HomeViewModel.kt" />
              <option name="originalContent" value="package com.example.rnblesensormonitor.ui.home&#10;&#10;import android.Manifest&#10;import android.annotation.SuppressLint&#10;import androidx.annotation.RequiresPermission&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.ViewModel&#10;import com.example.rnblesensormonitor.bluetooth.BleScanner&#10;import com.example.rnblesensormonitor.model.Device&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import com.example.rnblesensormonitor.bluetooth.BleConnector&#10;&#10;@HiltViewModel&#10;class HomeViewModel @Inject constructor(&#10;    private val bleScanner: BleScanner,&#10;    private val bleScanCallback: com.example.rnblesensormonitor.bluetooth.BleScanCallback,&#10;    private val bleConnector: BleConnector&#10;) : ViewModel() {&#10;&#10;    private val _devices = MutableLiveData&lt;List&lt;Device&gt;&gt;()&#10;    val devices: LiveData&lt;List&lt;Device&gt;&gt; = _devices&#10;&#10;    init {&#10;        observeScanResults()&#10;    }&#10;&#10;    @RequiresPermission(Manifest.permission.BLUETOOTH_SCAN)&#10;    fun startScanning() {&#10;        bleScanner.startScanning()&#10;    }&#10;&#10;    @RequiresPermission(Manifest.permission.BLUETOOTH_SCAN)&#10;    fun stopScanning() {&#10;        bleScanner.stopScanning()&#10;    }&#10;&#10;    @RequiresPermission(Manifest.permission.BLUETOOTH_CONNECT)&#10;    fun connectToDevice(device: Device) {&#10;        bleConnector.connect(device.address)&#10;    }&#10;&#10;    @SuppressLint(&quot;MissingPermission&quot;)&#10;    private fun observeScanResults() {&#10;        bleScanCallback.scanResults.observeForever { scanResults -&gt;&#10;            _devices.postValue(scanResults.map { Device.fromScanResult(it) })&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.rnblesensormonitor.ui.home&#10;&#10;import android.Manifest&#10;import android.annotation.SuppressLint&#10;import androidx.annotation.RequiresPermission&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.ViewModel&#10;import com.example.rnblesensormonitor.bluetooth.BleScanner&#10;import com.example.rnblesensormonitor.model.Device&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import javax.inject.Inject&#10;import com.example.rnblesensormonitor.bluetooth.BleConnector&#10;import com.example.rnblesensormonitor.bluetooth.BleGattCallback&#10;&#10;@HiltViewModel&#10;class HomeViewModel @Inject constructor(&#10;    private val bleScanner: BleScanner,&#10;    private val bleScanCallback: com.example.rnblesensormonitor.bluetooth.BleScanCallback,&#10;    private val bleConnector: BleConnector,&#10;    private val bleGattCallback: BleGattCallback // injected callback&#10;) : ViewModel() {&#10;&#10;    // LiveData for received BLE data&#10;    val receivedData: LiveData&lt;ByteArray&gt; get() = bleGattCallback.receivedData&#10;&#10;    private val _devices = MutableLiveData&lt;List&lt;Device&gt;&gt;()&#10;    val devices: LiveData&lt;List&lt;Device&gt;&gt; = _devices&#10;&#10;    init {&#10;        observeScanResults()&#10;    }&#10;&#10;    @RequiresPermission(Manifest.permission.BLUETOOTH_SCAN)&#10;    fun startScanning() {&#10;        bleScanner.startScanning()&#10;    }&#10;&#10;    @RequiresPermission(Manifest.permission.BLUETOOTH_SCAN)&#10;    fun stopScanning() {&#10;        bleScanner.stopScanning()&#10;    }&#10;&#10;    @RequiresPermission(Manifest.permission.BLUETOOTH_CONNECT)&#10;    fun connectToDevice(device: Device) {&#10;        bleConnector.connect(device.address)&#10;    }&#10;&#10;    @SuppressLint(&quot;MissingPermission&quot;)&#10;    private fun observeScanResults() {&#10;        bleScanCallback.scanResults.observeForever { scanResults -&gt;&#10;            _devices.postValue(scanResults.map { Device.fromScanResult(it) })&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_home.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_home.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.ui.home.HomeFragment&quot;&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/scan_button&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:text=&quot;Scan&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/device_list&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;400dp&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintHorizontal_bias=&quot;0.0&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/scan_button&quot;&#10;        app:layout_constraintVertical_bias=&quot;0.0&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.ui.home.HomeFragment&quot;&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/scan_button&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:text=&quot;Scan&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/device_list&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;400dp&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintHorizontal_bias=&quot;0.0&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/scan_button&quot;&#10;        app:layout_constraintVertical_bias=&quot;0.0&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/data_text&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Data: --&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/device_list&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;RnBleSensorMonitor&lt;/string&gt;&#10;    &lt;string name=&quot;title_home&quot;&gt;Home&lt;/string&gt;&#10;    &lt;string name=&quot;title_dashboard&quot;&gt;Dashboard&lt;/string&gt;&#10;    &lt;string name=&quot;title_notifications&quot;&gt;Notifications&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;RnBleSensorMonitor&lt;/string&gt;&#10;    &lt;string name=&quot;title_home&quot;&gt;Home&lt;/string&gt;&#10;    &lt;string name=&quot;title_dashboard&quot;&gt;Dashboard&lt;/string&gt;&#10;    &lt;string name=&quot;title_notifications&quot;&gt;Notifications&lt;/string&gt;&#10;    &lt;string name=&quot;scan&quot;&gt;Scan&lt;/string&gt;&#10;    &lt;string name=&quot;data_default&quot;&gt;Data: --&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>