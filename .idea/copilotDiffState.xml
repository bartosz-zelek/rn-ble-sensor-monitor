<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rnblesensormonitor/bluetooth/BleScanner.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rnblesensormonitor/bluetooth/BleScanner.kt" />
              <option name="originalContent" value="package com.example.rnblesensormonitor.bluetooth&#10;&#10;import android.Manifest&#10;import android.bluetooth.BluetoothAdapter&#10;import android.bluetooth.le.ScanCallback&#10;import android.bluetooth.le.ScanFilter&#10;import android.bluetooth.le.ScanSettings&#10;import android.util.Log&#10;import javax.inject.Inject&#10;&#10;class BleScanner @Inject constructor(&#10;    private val bluetoothAdapter: BluetoothAdapter,&#10;    private val scanCallback: ScanCallback&#10;) {&#10;    private val bleScanner = bluetoothAdapter.bluetoothLeScanner&#10;    private val scanFilters = mutableListOf&lt;ScanFilter&gt;()&#10;    private val scanSettings = ScanSettings.Builder()&#10;        .setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY)&#10;        .build()&#10;&#10;    fun startScanning() {&#10;        try {&#10;            bleScanner.startScan(scanFilters, scanSettings, scanCallback)&#10;        } catch (e: SecurityException) {&#10;            Log.e(&quot;BleScanner&quot;, &quot;SecurityException in startScanning&quot;, e)&#10;        }&#10;    }&#10;&#10;    fun stopScanning() {&#10;        try {&#10;            bleScanner.stopScan(scanCallback)&#10;        } catch (e: SecurityException) {&#10;            Log.e(&quot;BleScanner&quot;, &quot;SecurityException in stopScanning&quot;, e)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.rnblesensormonitor.bluetooth&#10;&#10;import android.Manifest&#10;import android.bluetooth.BluetoothAdapter&#10;import android.bluetooth.le.ScanCallback&#10;import android.bluetooth.le.ScanFilter&#10;import android.bluetooth.le.ScanSettings&#10;import android.util.Log&#10;import javax.inject.Inject&#10;&#10;class BleScanner @Inject constructor(&#10;    private val bluetoothAdapter: BluetoothAdapter,&#10;    private val scanCallback: ScanCallback&#10;) {&#10;    private val bleScanner = bluetoothAdapter.bluetoothLeScanner&#10;    private val scanFilters = mutableListOf&lt;ScanFilter&gt;()&#10;    private val scanSettings = ScanSettings.Builder()&#10;        .setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY)&#10;        .build()&#10;&#10;    fun startScanning() {&#10;        try {&#10;            bleScanner.startScan(null, scanSettings, scanCallback)&#10;        } catch (e: SecurityException) {&#10;            Log.e(&quot;BleScanner&quot;, &quot;SecurityException in startScanning&quot;, e)&#10;        }&#10;    }&#10;&#10;    fun stopScanning() {&#10;        try {&#10;            bleScanner.stopScan(scanCallback)&#10;        } catch (e: SecurityException) {&#10;            Log.e(&quot;BleScanner&quot;, &quot;SecurityException in stopScanning&quot;, e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/rnblesensormonitor/ui/adapter/DeviceListAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/rnblesensormonitor/ui/adapter/DeviceListAdapter.kt" />
              <option name="originalContent" value="package com.example.rnblesensormonitor.ui.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import androidx.recyclerview.widget.DiffUtil&#10;import androidx.recyclerview.widget.ListAdapter&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.rnblesensormonitor.databinding.ListItemDeviceBinding&#10;import com.example.rnblesensormonitor.model.Device&#10;&#10;class DeviceListAdapter(private val onItemClicked: (Device) -&gt; Unit) : ListAdapter&lt;Device, DeviceListAdapter.ViewHolder&gt;(DeviceDiffCallback()) {&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val binding = ListItemDeviceBinding.inflate(LayoutInflater.from(parent.context), parent, false)&#10;        return ViewHolder(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val device = getItem(position)&#10;        holder.bind(device)&#10;        holder.itemView.setOnClickListener {&#10;            onItemClicked(device)&#10;        }&#10;    }&#10;&#10;    class ViewHolder(private val binding: ListItemDeviceBinding) : RecyclerView.ViewHolder(binding.root) {&#10;        fun bind(device: Device) {&#10;            binding.deviceName.text = device.name ?: &quot;Unknown Device&quot;&#10;            binding.deviceAddress.text = device.address&#10;            binding.deviceRssi.text = &quot;${device.rssi} dBm&quot;&#10;        }&#10;    }&#10;}&#10;&#10;class DeviceDiffCallback : DiffUtil.ItemCallback&lt;Device&gt;() {&#10;    override fun areItemsTheSame(oldItem: Device, newItem: Device): Boolean {&#10;        return oldItem.address == newItem.address&#10;    }&#10;&#10;    override fun areContentsTheSame(oldItem: Device, newItem: Device): Boolean {&#10;        return oldItem == newItem&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.rnblesensormonitor.ui.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import androidx.recyclerview.widget.DiffUtil&#10;import androidx.recyclerview.widget.ListAdapter&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.rnblesensormonitor.R&#10;import com.example.rnblesensormonitor.databinding.ListItemDeviceBinding&#10;import com.example.rnblesensormonitor.model.Device&#10;&#10;class DeviceListAdapter(private val onItemClicked: (Device) -&gt; Unit) : ListAdapter&lt;Device, DeviceListAdapter.ViewHolder&gt;(DeviceDiffCallback()) {&#10;&#10;    private var selectedPosition = RecyclerView.NO_POSITION&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val binding = ListItemDeviceBinding.inflate(LayoutInflater.from(parent.context), parent, false)&#10;        return ViewHolder(binding)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val device = getItem(position)&#10;        holder.bind(device)&#10;&#10;        if (selectedPosition == position) {&#10;            holder.itemView.setBackgroundResource(R.color.selected_item_background)&#10;        } else {&#10;            holder.itemView.setBackgroundResource(android.R.color.transparent)&#10;        }&#10;&#10;        holder.itemView.setOnClickListener {&#10;            onItemClicked(device)&#10;            val previousPosition = selectedPosition&#10;            selectedPosition = holder.adapterPosition&#10;            notifyItemChanged(previousPosition)&#10;            notifyItemChanged(selectedPosition)&#10;        }&#10;    }&#10;&#10;    class ViewHolder(private val binding: ListItemDeviceBinding) : RecyclerView.ViewHolder(binding.root) {&#10;        fun bind(device: Device) {&#10;            binding.deviceName.text = device.name ?: &quot;Unknown Device&quot;&#10;            binding.deviceAddress.text = device.address&#10;            binding.deviceRssi.text = &quot;${device.rssi} dBm&quot;&#10;        }&#10;    }&#10;}&#10;&#10;class DeviceDiffCallback : DiffUtil.ItemCallback&lt;Device&gt;() {&#10;    override fun areItemsTheSame(oldItem: Device, newItem: Device): Boolean {&#10;        return oldItem.address == newItem.address&#10;    }&#10;&#10;    override fun areContentsTheSame(oldItem: Device, newItem: Device): Boolean {&#10;        return oldItem == newItem&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/colors.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/colors.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;color name=&quot;selected_item_background&quot;&gt;#E0E0E0&lt;/color&gt;&#10;&lt;/resources&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>